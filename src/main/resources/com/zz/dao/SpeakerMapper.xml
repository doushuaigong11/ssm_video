<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zz.dao.SpeakerMapper">
  <resultMap id="BaseResultMap" type="com.zz.pojo.Speaker">
    <id column="id" jdbcType="INTEGER" property="speakerId" />
    <result column="speaker_name" jdbcType="VARCHAR" property="speakerName" />
    <result column="speaker_job" jdbcType="VARCHAR" property="speakerJob" />
    <result column="head_img_url" jdbcType="VARCHAR" property="headImgUrl" />
    <result column="speaker_desc" jdbcType="LONGVARCHAR" property="speakerDesc" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zz.pojo.Speaker">
    <result column="speaker_desc" jdbcType="LONGVARCHAR" property="speakerDesc" />
  </resultMap>

  <resultMap id="speakerMap" type="com.zz.pojo.Speaker">
    <id column="id" jdbcType="INTEGER" property="speakerId" />
    <result column="speaker_name" jdbcType="VARCHAR" property="speakerName" />
    <result column="speaker_job" jdbcType="VARCHAR" property="speakerJob" />
    <result column="head_img_url" jdbcType="VARCHAR" property="headImgUrl" />
    <result column="speaker_desc" jdbcType="LONGVARCHAR" property="speakerDesc" />
  </resultMap>
  <select id="findAllSpeaker" resultMap="speakerMap">
    select * from speaker
  </select>


  <delete id="deleteByIds">
    delete from speaker
    where id in
      <foreach collection="array" open="(" close=")" separator="," item="ids">
        #{ids}
      </foreach>
  </delete>


  <update id="updateSpeaker" parameterType="com.zz.pojo.Speaker">

    update speaker set speaker_name = #{speakerName},speaker_job = #{speakerJob},speaker_desc = #{speakerDesc}
    where id = #{speakerId}
  </update>


  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, speaker_name, speaker_job, head_img_url
  </sql>
  <sql id="Blob_Column_List">
    speaker_desc
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.zz.pojo.SpeakerExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from speaker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.zz.pojo.SpeakerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from speaker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from speaker
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from speaker
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zz.pojo.SpeakerExample">
    delete from speaker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zz.pojo.Speaker">
    insert into speaker (id, speaker_name, speaker_job, 
      head_img_url, speaker_desc)
    values (#{id,jdbcType=INTEGER}, #{speakerName,jdbcType=VARCHAR}, #{speakerJob,jdbcType=VARCHAR}, 
      #{headImgUrl,jdbcType=VARCHAR}, #{speakerDesc,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zz.pojo.Speaker">
    insert into speaker
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="speakerId != null">
        speakerId,
      </if>
      <if test="speakerName != null">
        speaker_name,
      </if>
      <if test="speakerJob != null">
        speaker_job,
      </if>
      <if test="headImgUrl != null">
        head_img_url,
      </if>
      <if test="speakerDesc != null">
        speaker_desc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="speakerId != null">
        #{speakerId,jdbcType=INTEGER},
      </if>
      <if test="speakerName != null">
        #{speakerName,jdbcType=VARCHAR},
      </if>
      <if test="speakerJob != null">
        #{speakerJob,jdbcType=VARCHAR},
      </if>
      <if test="headImgUrl != null">
        #{headImgUrl,jdbcType=VARCHAR},
      </if>
      <if test="speakerDesc != null">
        #{speakerDesc,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zz.pojo.SpeakerExample" resultType="java.lang.Long">
    select count(*) from speaker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update speaker
    <set>
      <if test="record.id != null">
        id = #{record.speakerId,jdbcType=INTEGER},
      </if>
      <if test="record.speakerName != null">
        speaker_name = #{record.speakerName,jdbcType=VARCHAR},
      </if>
      <if test="record.speakerJob != null">
        speaker_job = #{record.speakerJob,jdbcType=VARCHAR},
      </if>
      <if test="record.headImgUrl != null">
        head_img_url = #{record.headImgUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.speakerDesc != null">
        speaker_desc = #{record.speakerDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update speaker
    set id = #{record.speakerId,jdbcType=INTEGER},
      speaker_name = #{record.speakerName,jdbcType=VARCHAR},
      speaker_job = #{record.speakerJob,jdbcType=VARCHAR},
      head_img_url = #{record.headImgUrl,jdbcType=VARCHAR},
      speaker_desc = #{record.speakerDesc,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update speaker
    set id = #{record.speakerId,jdbcType=INTEGER},
      speaker_name = #{record.speakerName,jdbcType=VARCHAR},
      speaker_job = #{record.speakerJob,jdbcType=VARCHAR},
      head_img_url = #{record.headImgUrl,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zz.pojo.Speaker">
    update speaker
    <set>
      <if test="speakerName != null">
        speaker_name = #{speakerName,jdbcType=VARCHAR},
      </if>
      <if test="speakerJob != null">
        speaker_job = #{speakerJob,jdbcType=VARCHAR},
      </if>
      <if test="headImgUrl != null">
        head_img_url = #{headImgUrl,jdbcType=VARCHAR},
      </if>
      <if test="speakerDesc != null">
        speaker_desc = #{speakerDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{speakerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zz.pojo.Speaker">
    update speaker
    set speaker_name = #{speakerName,jdbcType=VARCHAR},
      speaker_job = #{speakerJob,jdbcType=VARCHAR},
      head_img_url = #{headImgUrl,jdbcType=VARCHAR},
      speaker_desc = #{speakerDesc,jdbcType=LONGVARCHAR}
    where id = #{speakerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zz.pojo.Speaker">
    update speaker
    set speaker_name = #{speakerName,jdbcType=VARCHAR},
      speaker_job = #{speakerJob,jdbcType=VARCHAR},
      head_img_url = #{headImgUrl,jdbcType=VARCHAR}
    where id = #{speakerId,jdbcType=INTEGER}
  </update>
</mapper>